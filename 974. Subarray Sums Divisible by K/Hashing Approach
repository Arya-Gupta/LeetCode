// Time Complexity - Iterating through the array takes O(N) time.
// Space Complexity - Storing the elements in the hashmap takes O(N) space.
// Explanation - This question is similar to 
<a href="https://github.com/Arya-Gupta/LeetCode/tree/main/523.%20Continuous%20Subarray%20Sum">1 - Chrome dev tools</a>

class Solution {
public:
    int findRemainder(int a, int b){
        if(a >= 0) return a % b;
        return ((a % b) + b) % b; // In case the number being divided is negative
    }
    
    int subarraysDivByK(vector<int>& nums, int k) {
        int n = nums.size(), sum = 0;
        unordered_map<int, int> mp;
        int count = 0;
        mp[0]++; 
        for(int i = 0; i < n; i++){
            sum += nums[i]; 
            int rem = findRemainder(sum, k);
            if(mp.find(rem) != mp.end()){
                count += mp[rem];
            }
            mp[rem]++;  
        }
        return count;
    }
};
