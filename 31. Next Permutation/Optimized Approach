// Time Complexity -
// Space Complexity -
// Explanation -
Traverse the array linearly from the end - find first index i such that a[i] < a[i + 1] --> index1
Traverse the array linearly from the end upto arr[i + 1] - find next greater element of arr[i] --> index2
Swap the elements at index1 and index2
Reverse everything to the right of index1 to obtain the next permutation

As example, let us take 1, 3, 5, 4, 2.
This can be broken up into two parts - 1, 3 and 5, 4, 2. Notice that 5, 4, 2 is the descending part. 
ANY array can be broken up such that it has such a descending part. 
In the sequence of numbers 1, 3, 5, 4, 2 - 3 is the number lying at index1 and 4 is the element lying at index 2.
If we list out the permutations, the next permutation of 1, 3, 5, 4, 2 will obviously be greater than it.
So to find a permutation greater than the one we already have, we need to swap 3 for something which is the NEXT GREATER ELEMENT - 4. 
Swapping with 5 will surely result in a greater permutation - but not the NEXT greater permutation.
Thus after swapping, we have 1, 4, 5, 3, 2 - divided into groups of 1, 4 and 5, 3, 2. 
As it can be observed, the second group 5, 3, 2 is still in descending order.
We have already swapped 3 for 4 to result in a greater value - now we need to minimize the second group in order to find the just next permutation.
We can do this by reversing the second group which will result in it having an ascending order - 2, 3, 5.
Thus our next greater permutation is 1, 4, 2, 3, 5.
