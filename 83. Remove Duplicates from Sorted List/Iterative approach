// Time Complexity - Iterating over the entire LL takes O(N) time.
// Space Complexity - Since we do not use any extra space, space complexity is O(1).
// Explanation - Initially we have currNode which is a pointer to the head note. We run a while loop till currNode->next != NULL and check whether the values of the current and next nodes are equal. If they are equal, we delete the next node.

class Solution {
public:
    void deleteNode(ListNode *currNode){
        ListNode *temp = currNode->next;
        currNode->next = currNode->next->next;
        delete temp;
    }
    
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head) return head;
        ListNode *currNode = head;
    
        while(currNode->next){
            if(currNode->val == currNode->next->val){
                deleteNode(currNode); // Deleting the node after currNode
            }
            else{
                currNode = currNode->next;
            }
        }
        return head;
    }
};
