// Time Complexity - Iterating through the array takes O(N) time.
// Space Complexity - Since we are creating a vector of N size, space taken is O(N).
// Explanation - We have to find the first missing positive number from an array of size N.
We create a vector V, of size N with all values set to false. 
Now when we encounter a positive value in our array which is <= n, we mark it true at its corresponding position (nums[i] - 1) in vector V.
If the number is > n, there is no point keeping track of it because it is not going to help in finding the first missing positive.
Now we iterate through V to find the first i for which V[i] is false. From this, i + 1 will give us the first missing positive.
We may find that all values of V are true in case the array is something like [1, 2, 3]. In this case, our smallest missing positive number is n + 1 = 4.

Example: 
nums: 3, 4, -1, 1
V   : 1, 0,  1, 1
V[i] is false at i = 1 => i + 1 = 2 is the first missing positive

Example: 
nums: 7, 2, -1, 1
V   : 1, 1,  0, 0
V[i] is false at i = 2 => i + 1 = 3 is the first missing positive

Example: 1
nums: 1, 2, 3
V   : 1, 1, 1
n + 1 = 4 is the first missing positive

class Solution {
public:
    int firstMissingPositive(vector<int>& nums){
        int n = nums.size();
        vector<bool> V(n, false);
        
        for(int i = 0; i < n; i++){
            if(nums[i] > 0 && nums[i] <= n) V[nums[i] - 1] = true;
        }
        
        for(int i = 0; i < n; i++){
            if(!V[i]) return i + 1;
        }
        return n + 1; // if array is 1, 2, 3 then first missing positive is 4
    }
};
