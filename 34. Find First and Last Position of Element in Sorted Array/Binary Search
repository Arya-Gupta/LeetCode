// Time Complexity - Time taken by binary search is O(logN base 2) because it reduces the elements to be searched by half each time.
// Space Complexity - Since we do not use any extra space, space taken is O(1).
// Explanation - Binary Search: https://github.com/Arya-Gupta/LeetCode/blob/main/704.%20Binary%20Search/Solution
This is a modified version of the binary search.
Instead of returning an element when we encounter it for the first time at mid, we search [start, mid - 1] or [mid + 1, end] depending upon whether we want to find the first or last occurence of that element.
The position of the element is stored is updated in result (initally contains -1 in case element isn't present in the array).

class Solution {
public:
    int binarySearch(vector<int> nums, int target, string occurence){
        int start = 0, mid = 0, end = nums.size() - 1, result = -1;
        while(start <= end){
            mid = start + (end - start) / 2;
            if(nums[mid] == target){
                result = mid;
                (occurence == "first") ? end = mid - 1 : start = mid + 1;
            }
            else if(target > nums[mid]) start = mid + 1;
            else end = mid - 1;
        }
        return result;
    }
    
    vector<int> searchRange(vector<int>& nums, int target){
        return {binarySearch(nums, target, "first"), binarySearch(nums, target, "last")};
    }
};
