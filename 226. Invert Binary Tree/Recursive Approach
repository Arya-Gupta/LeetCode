// Time Complexity - Since we are visiting all the nodes, time taken is O(N).
// Space Complexity - Since we are storing the nodes in the call stack, space taken is O(H) where H = height of tree => O(N) in worst case
// Explanation - While performing post-order traversal, we swap the left and right child of each node.

class Solution {
public:
    void doInvert(TreeNode* root){
        if(!root) return;
        invertTree(root->left);
        invertTree(root->right);
        swap(root->left, root->right);
    }
    
    TreeNode* invertTree(TreeNode* root) {
        doInvert(root);
        return root;
    }
};
