// Time Complexity - At the Nth row, the pascal triangle will have N columns. Thus time taken to create the entire pascal triangle is O(N^2).
// Space Complexity - Space taken is O(1).
// Explanation - We resize each row to have same number of columns as the row number. Then we mark the first and last element of the row to be 1.
Now the rest of the elements in any row can be calculated as the sum of the element at the same column number in the previous row (ans[i - 1][j - 1]) and the element at the previous column number in the previous row (ans[i - 1][j]).

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ans(numRows);
        for(int i = 0; i < numRows; i++){
            ans[i].resize(i + 1); // Row number = Column number
            ans[i][0] = ans[i][i] = 1; // First and last value of each row is 1
            for(int j = 1; j < i; j++) ans[i][j] = ans[i - 1][j] + ans[i - 1][j - 1]; // Rest of the values
        }
        return ans;
    }
};
