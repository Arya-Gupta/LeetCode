// Time Complexity - Time taken to perform binary search on (row * col) elements is O(log(row * col)).
// Space Complexity - Space taken is O(1).
// Explanation - If we consider all the elements in a matrix to be in an array, then that array will be sorted.

Example:
1  3  5  7
10 11 16 20
23 30 34 60

The above matrix in the form of an array is 1, 3, 5, 7, 10, 11, 16, 20, 23, 30, 34, 60.
We can perform binary search on this sorted array to find the target element in O(log(row * col)).
However, creating an array from the matrix would take O(row * col) space.

Thus we treat the given matrix as an array. For any index in our array, we can get its corresponding position of the matrix.
The row number is given by array index / total no of columns, while the column number is given by array index % total no of columns.
We can now perform binary search by treating this matrix as one single array.

class Solution {
public:    
    bool searchMatrix(vector<vector<int>>& matrix, int target){
        int row = matrix.size(), col = matrix[0].size(), start = 0, end = row * col - 1, mid, num;
        while(start <= end){
            mid = start + (end - start) / 2;
            num = matrix[mid / col][mid % col];
            if(num == target) return true;
            else if(target > num) start = mid + 1;
            else end = mid - 1;
        }
        return false;
    }
};
