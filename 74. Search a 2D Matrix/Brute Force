// Time Complexity - Time taken to visit each row is O(N) and for binary search is O(logM). Thus total time taken is O(NlogM).
// Space Complexity - Since we do not use any extra space, space taken is O(1).
// Explanation - We perform binary search on each row to find the target value.

class Solution {
public:
    bool binarySearch(vector<int> nums, int target, int start, int end) {
        while(start <= end){
            int mid = start + (end - start) / 2;
            if(nums[mid] == target) return true;
            else if(target > nums[mid]) start = mid + 1;
            else end = mid - 1;
        }
        return false;
    }
    
    bool searchMatrix(vector<vector<int>>& matrix, int target){
        int row = matrix.size(), col = matrix[0].size();
        for(int i = 0; i < row; i++){
            if(binarySearch(matrix[i], target, 0, col - 1)) return true;
        }
        return false;
    }
};
