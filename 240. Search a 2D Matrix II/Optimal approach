// Time Complexity - At most, we can traverse the length of 0 to row and col to 0. Thus time taken is O(row + col).
// Space Complexity - Space taken is O(1).
// Explanation - We start at the top right corner of the matrix, and move left/right according to whether the current value is greater or lesser than target.
This uses the property of each row and column being sorted.

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size(), col = matrix[0].size(), i = 0, j = col - 1;
        while(i < row && j >= 0){
            if(matrix[i][j] == target) return true;
            else if(matrix[i][j] > target) j--;
            else i++;
        }
        return false;
    }
};
